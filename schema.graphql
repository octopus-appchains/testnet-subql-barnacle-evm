type Block @entity {
  id: ID!

  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: String
  signer: Account #create relation to account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean

  block: Block #create relation to block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID!

  index: Int!
  section: String!
  method: String!
  data: String!

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrins
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args: String
  timestamp: Date
  isSuccess: Boolean

  signer: Account #create ration to account
  extrinsic: Extrinsic #create relation to extrinsic
  parentCall: Call #create relation to call
  calls: [Call] @derivedFrom(field: "parentCall")
}

type Account @entity {
  id: ID!

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")

  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
}

type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  amount: BigInt

  extrinsic: Extrinsic #create relation to extrinsic
  call: Call #create relation to call
  timestamp: Date
  isSuccess: Boolean
}

type SystemTokenTransfer @entity {
  id: ID!

  from: Account
  to: Account
  amount: BigInt
  timestamp: Date
  extrinsic: Extrinsic
}

type Erc20Transaction @entity {
  id: ID!
  value: BigInt!
  from: String!
  to: String!
  contractAddress: String!
}

type Erc20Approval @entity {
  id: ID!
  value: BigInt!
  owner: String!
  spender: String!
  contractAddress: String!
}

type SopometaForsell @entity {
  id: ID!
  contractAddress: String!
  sopo_id: BigInt
  price: BigInt
}

type SopometaListandforsell @entity {
  id: ID!
  contractAddress: String!
  from: String
  to: String
  sopo_id: BigInt
  nft_id: BigInt
  nft_programe_address: String
  price: BigInt
}

type SopometaListed @entity {
  id: ID!
  contractAddress: String!
  from: String
  to: String
  sopo_id: BigInt
  nft_id: BigInt
  nft_programe_address: String
}

type SopometaNewoffer @entity {
  id: ID!
  contractAddress: String!
  from: String
  to: String
  sopo_id: BigInt
  price: BigInt
}

type SopometaSelled @entity {
  id: ID!
  contractAddress: String!
  from: String
  to: String
  sopo_id: BigInt
  selled_at: Int
  nft_id: BigInt
  nft_programe_address: String
  owner: String
}

type SopometaWithdraw @entity {
  id: ID!
  contractAddress: String!
  from: String
  to: String
  sopo_id: BigInt
  nft_id: BigInt
  nft_programe_address: String
  withdrawout_at: Int
}

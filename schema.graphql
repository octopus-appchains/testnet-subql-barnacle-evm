type Block @entity {
  id: ID!

  number: BigInt @index
  timestamp: Date @index
  parentHash: String
  specVersion: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  method: String @index
  section: String @index
  args: String
  signer: Account @index #create relation to account
  nonce: BigInt
  timestamp: Date @index
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean

  block: Block #create relation to block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID!

  index: Int!
  section: String! @index
  method: String! @index
  data: String!

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrins
}

type Call @entity {
  id: ID!

  section: String @index
  method: String @index
  args: String
  timestamp: Date @index
  isSuccess: Boolean

  signer: Account #create ration to account
  extrinsic: Extrinsic #create relation to extrinsic
  parentCall: Call #create relation to call
  calls: [Call] @derivedFrom(field: "parentCall")
}

type Account @entity {
  id: ID!
  timestamp: Date!

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")

  transferIn: [SystemTokenTransfer] @derivedFrom(field: "to")
  transferOut: [SystemTokenTransfer] @derivedFrom(field: "from")
}

type SystemTokenTransfer @entity {
  id: ID!

  from: Account @index
  to: Account @index
  amount: BigInt @index
  timestamp: Date @index
  extrinsic: Extrinsic
}

type EvmLog @entity {
  id: ID!

  address: String @index
  topics: [String]
  data: String
  timestamp: Date @index
  extrinsic: Extrinsic
}

type GameItemsApproveCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  to: String
  tokenId: BigInt
  success: Boolean!
}

type GameItemsDevClaimCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  to: String
  quantity: BigInt
  ipfsHash: [String]
  success: Boolean!
}

type GameItemsRenounceOwnershipCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!

  success: Boolean!
}

type GameItemsSafeTransferFromCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  from: String
  to: String
  tokenId: BigInt
  _data: String
  success: Boolean!
}

type GameItemsSetApprovalForAllCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  operator: String
  approved: Boolean
  success: Boolean!
}

type GameItemsSetKeyCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  signer: String
  success: Boolean!
}

type GameItemsTransferFromCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  from: String
  to: String
  tokenId: BigInt
  success: Boolean!
}

type GameItemsSetBaseURICall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  baseURI: String
  success: Boolean!
}

type GameItemsSetNameAndSymbolCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  _newName: String
  _newSymbol: String
  success: Boolean!
}

type GameItemsTransferLowerOwnershipCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  newOwner: String
  success: Boolean!
}

type GameItemsTransferOwnershipCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  newOwner: String
  success: Boolean!
}

type GameItemsTransferRealOwnershipCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  newRealOwner: String
  success: Boolean!
}

type GameItemsUpdateMetadataCall @entity {
  id: ID!
  caller: String!
  contractAddress: String!
  tokenId: BigInt
  ipfsHash: String
  signature: String
  success: Boolean!
}

type GameItemsApprovalEvent @entity {
  id: ID!
  contractAddress: String!
  owner: String
  approved: String
  tokenId: BigInt
}

type GameItemsApprovalForAllEvent @entity {
  id: ID!
  contractAddress: String!
  owner: String
  operator: String
  approved: Boolean
}

type GameItemsOwnershipTransferredEvent @entity {
  id: ID!
  contractAddress: String!
  previousOwner: String
  newOwner: String
}

type GameItemsTransferEvent @entity {
  id: ID!
  contractAddress: String!
  from: String
  to: String
  tokenId: BigInt
}
